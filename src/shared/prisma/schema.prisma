// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/@internal/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum OperationType {
  INCOME
  EXPENSE
  TRANSFER_IN
  TRANSFER_OUT
}

model Account {
  id Int @id @default(autoincrement())
  email String @unique
  password String
  admin Boolean @default(false)
  verified Boolean @default(false)
  created_at DateTime @default(now())

  categories Category[]
  bank_accounts BankAccount[]
  operations Operations[]

  @@map("account")
}

model BankAccount {
  id Int @id @default(autoincrement())
  name String 
  main Boolean @default(false)
  deleted Boolean @default(false)
  created_at DateTime @default(now())
  account_id Int
  currency_id Int
  account Account @relation(fields: [account_id], references: [id])
  currency Currency @relation(fields: [currency_id], references: [id])
  operations Operations[] @relation("outgoing")
  
  @@unique([name, account_id], name: "uq_bank_account_name_per_account")
  
  @@index([account_id])
  
  @@map("bank_account")
}

model Category {
  id Int @id @default(autoincrement())
  name String
  base_type TransactionType?
  deleted Boolean @default(false)
  created_at DateTime @default(now())
  account_id Int
  account Account @relation(fields: [account_id], references: [id])
  operations Operations[] 
  
  @@unique([name, account_id], name: "uq_category_name_per_account")

  @@map("category")
}

model Currency {
  id Int @id @default(autoincrement())
  symbol String @unique
  symbol_native String? @unique
  code String @unique
  name String @unique
  created_at DateTime @default(now())
  bank_accounts BankAccount[]
  ExchangeRateFrom ExchangeRate[] @relation(name: "from_currency")
  ExchangeRateTo ExchangeRate[] @relation(name: "to_currency")

  @@map("currency")
}

model ExchangeRate {
  id Int @id @default(autoincrement())
  from_currency_id Int
  to_currency_id Int
  rate Decimal @db.Decimal(15, 8)
  created_at DateTime @default(now())
  from_currency Currency @relation(fields: [from_currency_id], references: [id], name: "from_currency")
  to_currency Currency @relation(fields: [to_currency_id], references: [id], name: "to_currency")

  @@map("exchange_rate")
}

model Operations {
  id Int @id @default(autoincrement())
  name String?
  exchange_rate Decimal? @db.Decimal(15, 2)
  amount Decimal @db.Decimal(15, 2)
  description String?
  type OperationType
  created_at DateTime @default(now())
  
  bank_account_id Int @map("bank_account_id")
  bank_account BankAccount @relation("outgoing", fields: [bank_account_id], references: [id])
  
  category_id Int
  category Category @relation(fields: [category_id], references: [id])
  
  account_id Int
  account Account @relation(fields: [account_id], references: [id])

  transfer_pair_id Int? @unique
  transfer_pair    Operations? @relation("transfer_pair", fields: [transfer_pair_id], references: [id])
  mirrored_transfer Operations[] @relation("transfer_pair")

  @@map("operations")
}